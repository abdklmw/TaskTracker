@model IEnumerable<TaskTracker.Models.Client>

@{
    ViewData["Title"] = "Clients";
}

<h1>Clients</h1>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}

@await Html.PartialAsync("_CreateForm")

<p>
    <a id="create-new-btn" class="btn btn-primary">Create New</a>
</p>

<table class="table">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.Name)</th>
            <th>@Html.DisplayNameFor(model => model.Email)</th>
            <th>@Html.DisplayNameFor(model => model.Phone)</th>
            <th>@Html.DisplayNameFor(model => model.Address)</th>
            <th>@Html.DisplayNameFor(model => model.DefaultRate)</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var client in Model)
        {
            @await Html.PartialAsync("_DisplayRow", client)
            @await Html.PartialAsync("_EditFormRow", client)
        }
    </tbody>
</table>

<style>
    .edit-mode .form-control, #create-form .form-control {
        width: 100%;
        box-sizing: border-box;
        margin: 0;
        padding: 4px;
    }

    .edit-mode .text-danger, #create-form .text-danger {
        font-size: 0.8em;
        display: block;
    }

    .edit-mode .btn, #create-form .btn {
        margin-right: 5px;
    }

    .alert-success {
        transition: opacity 1s ease-in-out;
    }
</style>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Handle Edit button click
        document.querySelectorAll('.edit-btn').forEach(button => {
            button.addEventListener('click', function () {
                const clientId = this.getAttribute('data-client-id');
                // Toggle rows
                document.getElementById(`row-${clientId}`).style.display = 'none';
                document.getElementById(`edit-row-${clientId}`).style.display = 'table-row';
            });
        });

        // Handle Cancel button click for edit
        document.querySelectorAll('.cancel-btn').forEach(button => {
            button.addEventListener('click', function () {
                const clientId = this.getAttribute('data-client-id');
                // Revert to display mode
                document.getElementById(`row-${clientId}`).style.display = 'table-row';
                document.getElementById(`edit-row-${clientId}`).style.display = 'none';
            });
        });

        // Handle Create New button click
        document.getElementById('create-new-btn').addEventListener('click', function () {
            document.getElementById('create-form').style.display = 'block';
            this.style.display = 'none';
        });

        // Handle Cancel button click for create
        document.querySelector('.cancel-create-btn').addEventListener('click', function () {
            document.getElementById('create-form').style.display = 'none';
            document.getElementById('create-new-btn').style.display = 'inline-block';
        });

        // Fade out success alert after 15 seconds
        document.addEventListener('DOMContentLoaded', function () {
            const successAlert = document.querySelector('.alert-success');
            if (successAlert) {
                setTimeout(() => {
                    successAlert.style.opacity = '0';
                    setTimeout(() => {
                        successAlert.style.display = 'none';
                    }, 1000); // Wait for fade-out animation (1s)
                }, 5000); // Start fade-out after 15s
            }
        });
    </script>
}