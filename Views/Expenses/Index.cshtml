@model TaskTracker.Models.ExpenseIndexViewModel
@using Microsoft.AspNetCore.Mvc.Rendering

@{
    ViewData["Title"] = "Expenses";
    var hasFilters = Model.SelectedClientID != 0;
    var showFilterForm = hasFilters;
}

<!-- Display success or error messages -->
@await Html.PartialAsync("~/Views/Shared/_AlertsPartial.cshtml")

<!-- Create form partial, hidden by default -->
@await Html.PartialAsync("_CreateForm", new TaskTracker.Models.Expense.Expense())

<!-- Header with Create New button -->
<div class="d-flex justify-content-between align-items-center mb-3">
    <h1>Expenses</h1>
    <div>
        <button id="create-new-btn" class="btn btn-primary ml-2">Create New</button>
    </div>
</div>

<!-- Filter Form -->
@await Html.PartialAsync("_ExpensesFiltersPartial", Model)

<!-- Results and Controls -->
<div class="results-container mb-3">
    <div>
        @if (Model.TotalRecords > 0)
        {
            <p>Showing @Model.Expenses.Count() of @Model.TotalRecords records</p>
        }
        else
        {
            <p>No expenses match the selected filter.</p>
        }
    </div>
    <div class="controls-container">
        <button id="show-filter-btn" class="filter-btn" style="display: @(showFilterForm ? "none" : "inline-block");">
            <img src="~/images/icons/filter.svg" alt="Show Filter" class="filter-icon" />
        </button>
        <form asp-action="Index" method="get" class="records-per-page-form">
            <label for="recordLimit" class="form-label">Records per page</label>
            <select id="recordLimit" name="recordLimit" class="form-select" asp-items="@Model.RecordLimitOptions" onchange="this.form.submit()"></select>
            <input type="hidden" name="page" value="1" />
            <input type="hidden" name="clientFilter" value="@Model.SelectedClientID" />
        </form>
    </div>
</div>

<!-- Pagination -->
@await Html.PartialAsync("_PaginationPartial", Model)

<!-- Expense List -->
@{
    if (Model.TotalRecords > 0)
    {

        var groupedExpenses = Model.Expenses
            .Where(e => e.Client != null)
            .GroupBy(e => e.Client.Name ?? "No Client")
            .OrderBy(g => g.Key);
        var index = 1;

        @foreach (var group in groupedExpenses)
        {
            <div class="client-group mb-4">
                <h3 class="client-title">
                    @group.Key
                    <span class="client-title-line"></span>
                </h3>
                @foreach (var expense in group)
                {
                    var expenseRowViewModel = new TaskTracker.Models.Expense.ExpenseRowViewModel(expense, index);
                    @await Html.PartialAsync("_DisplayRow", expenseRowViewModel)
                    @await Html.PartialAsync("_EditFormRow", expenseRowViewModel)
                    index++;
                }
            </div>
        }
    }
}
@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
}