@model TaskTracker.Models.TimeEntriesIndexViewModel
@using Microsoft.AspNetCore.Mvc.Rendering

@{
    ViewData["Title"] = "Time Entries";
    var timezoneOffset = Model.TimezoneOffset;
    var hasFilters = Model.SelectedClientID != 0 || Model.SelectedProjectIDs.Any();
    var showFilterForm = hasFilters; // Show form if filters are applied
}

<!-- Display success or error messages -->
@await Html.PartialAsync("~/Views/Shared/_AlertsPartial.cshtml")
<div class="d-flex justify-content-between align-items-center mb-3">
    <h2>Completed time entries</h2>
    <div>
        <a id="import-timeentries-btn" class="btn btn-primary ml-2" asp-controller="TimeEntries" asp-action="Import">Import</a>
    </div>
</div>

<!-- Filter Form -->
@await Html.PartialAsync("_TimeEntryFiltersPartial", Model)

<!-- Results and Controls -->
<div class="results-container mb-3">
    <div>
        @if (Model.TotalRecords > 0)
        {
            <p>Showing @Model.TimeEntries.Count() of @Model.TotalRecords records</p>
        }
        else
        {
            <p>No completed time entries match the selected filters.</p>
        }
    </div>
    <div class="controls-container">
        <button id="show-filter-btn" class="filter-btn" style="display: @(showFilterForm ? "none" : "inline-block");">
            <img src="~/images/icons/filter.svg" alt="Show Filters" class="filter-icon" />
        </button>
        <form asp-action="Index" method="get" class="records-per-page-form">
            <label for="recordLimit" class="form-label">Records per page</label>
            <select id="recordLimit" name="recordLimit" class="form-select" asp-items="@Model.RecordLimitOptions" onchange="this.form.submit()"></select>
            <input type="hidden" name="page" value="1" />
            <input type="hidden" name="clientFilter" value="@Model.SelectedClientID" />
            @foreach (var projectId in Model.SelectedProjectIDs)
            {
                <input type="hidden" name="projectFilter" value="@projectId" />
            }
        </form>
    </div>
</div>

<!-- Pagination -->
@if (Model.TotalRecords > 0 && Model.TotalPages > 1)
{
    ViewData["recordLimit"] = Model.RecordLimit;
    ViewData["clientFilter"] = Model.SelectedClientID;
    ViewData["projectFilter"] = Model.SelectedProjectIDs;
@await Html.PartialAsync("_PaginationPartial", Model)
}

<!-- Time Entries Table -->
@if (Model.TotalRecords > 0)
{
    <div class="row mb-2">
        <div class="col-md-2"><strong>Client</strong></div>
        <div class="col-md-2"><strong>Project</strong></div>
        <div class="col-md-2"><strong>Start Date/Time</strong></div>
        <div class="col-md-2"><strong>End Date/Time</strong></div>
        <div class="col-md-2"><strong>Hours Spent</strong></div>
        <div class="col-md-2"><strong>Description</strong></div>
    </div>

    var index = 1;

    @foreach (var timeEntry in Model.TimeEntries.Where(t => t.EndDateTime != null))
    {
        var projectRowViewModel = new TaskTracker.Models.TimeEntries.TimeEntryRowViewModel(timeEntry, index, timezoneOffset);
        @await Html.PartialAsync("_DisplayRow", projectRowViewModel)
        @await Html.PartialAsync("_EditFormRow", projectRowViewModel)
        index++;
    }
}

@section Scripts {
    <script>
        var userTimezoneOffset = @timezoneOffset;
    </script>
}