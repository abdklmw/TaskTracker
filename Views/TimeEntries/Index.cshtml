@model TaskTracker.Models.TimeEntriesIndexViewModel
@using Microsoft.AspNetCore.Mvc.Rendering

@{
    ViewData["Title"] = "Time Entries";
    var timezoneOffset = ViewBag.TimezoneOffset;
}

<!-- Display success or error messages -->
@await Html.PartialAsync("~/Views/Shared/_AlertsPartial.cshtml")
<div class="d-flex justify-content-between align-items-center mb-3">
    <h2>Completed time entries</h2>
    <a id="import-timeentries-btn" class="btn btn-primary" asp-controller="TimeEntries" asp-action="Import">Import</a>
</div>

<!-- Filter Form -->
<div class="row mb-3">
    <div class="col-12 col-md-6 col-lg-4">
        <form asp-action="Index" method="get">
            <div class="mb-2">
                <label for="clientFilter" class="form-label">Filter by Client</label>
                <select id="clientFilter" name="clientFilter" class="form-select" asp-items="@Model.ClientFilterOptions">
                    <option value="0">All Clients</option>
                </select>
            </div>
            <div class="mb-2">
                <label for="projectFilter" class="form-label">Filter by Projects</label>
                <select id="projectFilter" name="projectFilter" class="form-select" multiple asp-items="@Model.ProjectFilterOptions">
                    <option value="0">All Projects</option>
                </select>
            </div>
            <button type="submit" class="btn btn-primary me-2">Apply Filters</button>
            <a asp-action="Index" asp-route-recordLimit="@Model.RecordLimit" class="btn btn-secondary">Clear Filters</a>
            <input type="hidden" name="page" value="1" />
            <input type="hidden" name="recordLimit" value="@Model.RecordLimit" />
        </form>
    </div>
</div>

@if (Model.TotalRecords > 0)
{
    <!-- Records per page Form -->
    <div class="row mb-3">
        <div class="col-12 col-md-6 col-lg-4">
            <form asp-action="Index" method="get">
                <label for="recordLimit" class="form-label">Records per page</label>
                <select id="recordLimit" name="recordLimit" class="form-select" asp-items="@Model.RecordLimitOptions" onchange="this.form.submit()"></select>
                <input type="hidden" name="page" value="1" />
                <input type="hidden" name="clientFilter" value="@Model.SelectedClientID" />
                @foreach (var projectId in Model.SelectedProjectIDs)
                {
                    <input type="hidden" name="projectFilter" value="@projectId" />
                }
            </form>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-12">
            <p>Showing @Model.TimeEntries.Count() of @Model.TotalRecords records</p>
            @if (Model.TotalPages > 1)
            {
                <nav aria-label="Page navigation">
                    <ul class="pagination">
                        <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                            <a class="page-link" asp-action="Index" asp-route-page="1" asp-route-recordLimit="@Model.RecordLimit" asp-route-clientFilter="@Model.SelectedClientID" asp-route-projectFilter="@string.Join(",", Model.SelectedProjectIDs)">First</a>
                        </li>
                        <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                            <a class="page-link" asp-action="Index" asp-route-page="@(Model.CurrentPage - 1)" asp-route-recordLimit="@Model.RecordLimit" asp-route-clientFilter="@Model.SelectedClientID" asp-route-projectFilter="@string.Join(",", Model.SelectedProjectIDs)">Previous</a>
                        </li>
                        @for (int i = 1; i <= Model.TotalPages; i++)
                        {
                            <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                                <a class="page-link" asp-action="Index" asp-route-page="@i" asp-route-recordLimit="@Model.RecordLimit" asp-route-clientFilter="@Model.SelectedClientID" asp-route-projectFilter="@string.Join(",", Model.SelectedProjectIDs)">@i</a>
                            </li>
                        }
                        <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                            <a class="page-link" asp-action="Index" asp-route-page="@(Model.CurrentPage + 1)" asp-route-recordLimit="@Model.RecordLimit" asp-route-clientFilter="@Model.SelectedClientID" asp-route-projectFilter="@string.Join(",", Model.SelectedProjectIDs)">Next</a>
                        </li>
                        <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                            <a class="page-link" asp-action="Index" asp-route-page="@Model.TotalPages" asp-route-recordLimit="@Model.RecordLimit" asp-route-clientFilter="@Model.SelectedClientID" asp-route-projectFilter="@string.Join(",", Model.SelectedProjectIDs)">Last</a>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-md-2"><strong>Client</strong></div>
        <div class="col-md-2"><strong>Project</strong></div>
        <div class="col-md-2"><strong>Start Date/Time</strong></div>
        <div class="col-md-2"><strong>End Date/Time</strong></div>
        <div class="col-md-2"><strong>Hours Spent</strong></div>
        <div class="col-md-2"><strong>Description</strong></div>
    </div>

    var index = 1;

    @foreach (var timeEntry in Model.TimeEntries.Where(t => t.EndDateTime != null))
    {
        var projectRowViewModel = new TaskTracker.Models.TimeEntries.TimeEntryRowViewModel(timeEntry, index);
        @await Html.PartialAsync("_DisplayRow", projectRowViewModel)
        @await Html.PartialAsync("_EditFormRow", projectRowViewModel)
    }
}
else
{
    <p>No completed timers</p>
}

@section Scripts {
    <script>
        var userTimezoneOffset = @timezoneOffset;
    </script>
}