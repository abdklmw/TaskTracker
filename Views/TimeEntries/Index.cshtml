@model TaskTracker.Models.TimeEntriesIndexViewModel
@using Microsoft.AspNetCore.Mvc.Rendering

@{
    ViewData["Title"] = "Time Entries";
    var timezoneOffset = ViewBag.TimezoneOffset;
}

<h1>Time Entries</h1>

<div class="row mb-3">
    <div class="col-12 col-md-6 col-lg-4">
        <button type="button" id="create-new-btn" class="btn btn-primary" style="@(Model.VisibleCreateForm ? "display:none;" : "")">Create New</button>
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@await Html.PartialAsync("_CreateForm", Model)

@await Html.PartialAsync("~/Views/TimeEntries/_RunningTimers.cshtml", Model.RunningTimers)

<div style="padding-top: 20px;"></div> <!-- Padding between sections -->

<h2>Completed time entries</h2>

@if (Model.TotalRecords > 0)
{
    <div class="row mb-3">
        <div class="col-12 col-md-6 col-lg-4">
            <form asp-action="Index" method="get">
                <label for="recordLimit" class="form-label">Records per page</label>
                <select id="recordLimit" name="recordLimit" class="form-select" asp-items="@Model.RecordLimitOptions" onchange="this.form.submit()"></select>
                <input type="hidden" name="page" value="1" />
            </form>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-12">
            <p>Showing @Model.TimeEntries.Count() of @Model.TotalRecords records</p>
            @if (Model.TotalPages > 1)
            {
                <nav aria-label="Page navigation">
                    <ul class="pagination">
                        <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                            <a class="page-link" asp-action="Index" asp-route-page="1" asp-route-recordLimit="@Model.RecordLimit">First</a>
                        </li>
                        <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                            <a class="page-link" asp-action="Index" asp-route-page="@(Model.CurrentPage - 1)" asp-route-recordLimit="@Model.RecordLimit">Previous</a>
                        </li>
                        @for (int i = 1; i <= Model.TotalPages; i++)
                        {
                            <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                                <a class="page-link" asp-action="Index" asp-route-page="@i" asp-route-recordLimit="@Model.RecordLimit">@i</a>
                            </li>
                        }
                        <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                            <a class="page-link" asp-action="Index" asp-route-page="@(Model.CurrentPage + 1)" asp-route-recordLimit="@Model.RecordLimit">Next</a>
                        </li>
                        <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                            <a class="page-link" asp-action="Index" asp-route-page="@Model.TotalPages" asp-route-recordLimit="@Model.RecordLimit">Last</a>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-md-2"><strong>Client</strong></div>
        <div class="col-md-2"><strong>Project</strong></div>
        <div class="col-md-2"><strong>Start Date/Time</strong></div>
        <div class="col-md-2"><strong>End Date/Time</strong></div>
        <div class="col-md-2"><strong>Hours Spent</strong></div>
        <div class="col-md-2"><strong>Description</strong></div>
    </div>

    var index = 1;

    @foreach (var timeEntry in Model.TimeEntries.Where(t => t.EndDateTime != null))
    {
        var projectRowViewModel = new TimeEntryRowViewModel(timeEntry, index);
        @await Html.PartialAsync("_DisplayRow", projectRowViewModel)
        @await Html.PartialAsync("_EditFormRow", projectRowViewModel)
    }
}
else
{
    <p>No completed timers</p>
}


@section Scripts {
    <script>
        var userTimezoneOffset = @timezoneOffset;
    </script>
}