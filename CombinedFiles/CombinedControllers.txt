===== BEGIN FILE: Controllers\ClientsController.cs =====

using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using TaskTracker.Data;
using TaskTracker.Models;
namespace TaskTracker.Controllers
{
public class ClientsController : Controller
{
private readonly AppDbContext _context;
public ClientsController(AppDbContext context)
{
_context = context;
}
public async Task<IActionResult> Index()
{
return View(await _context.Clients.ToListAsync());
}
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Create([Bind("Name,Email,Phone,Address,DefaultRate")] Client client)
{
if (ModelState.IsValid)
{
_context.Add(client);
await _context.SaveChangesAsync();
TempData["SuccessMessage"] = "Client created successfully.";
return RedirectToAction(nameof(Index));
}
var errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage);
TempData["ErrorMessage"] = string.Join("; ", errors);
return RedirectToAction(nameof(Index));
}
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Edit(int id, [Bind("ClientID,Name,Email,Phone,Address,DefaultRate")] Client client)
{
if (id != client.ClientID)
{
return NotFound();
}
if (ModelState.IsValid)
{
try
{
_context.Update(client);
await _context.SaveChangesAsync();
TempData["SuccessMessage"] = "Client updated successfully.";
}
catch (DbUpdateConcurrencyException)
{
if (!ClientExists(client.ClientID))
{
return NotFound();
}
else
{
throw;
}
}
return RedirectToAction(nameof(Index));
}
var errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage);
TempData["ErrorMessage"] = string.Join("; ", errors);
return RedirectToAction(nameof(Index));
}
public async Task<IActionResult> Delete(int? id)
{
if (id == null)
{
return NotFound();
}
var client = await _context.Clients
.FirstOrDefaultAsync(m => m.ClientID == id);
if (client == null)
{
return NotFound();
}
return View(client);
}
[HttpPost, ActionName("Delete")]
[ValidateAntiForgeryToken]
public async Task<IActionResult> DeleteConfirmed(int id)
{
var client = await _context.Clients.FindAsync(id);
if (client != null)
{
_context.Clients.Remove(client);
}
await _context.SaveChangesAsync();
return RedirectToAction(nameof(Index));
}
private bool ClientExists(int id)
{
return _context.Clients.Any(e => e.ClientID == id);
}
}
}

===== END FILE: Controllers\ClientsController.cs =====

===== BEGIN FILE: Controllers\ExpensesController.cs =====

using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using TaskTracker.Data;
using TaskTracker.Models;
namespace TaskTracker.Controllers
{
public class ExpensesController : Controller
{
private readonly AppDbContext _context;
public ExpensesController(AppDbContext context)
{
_context = context;
}
public async Task<IActionResult> Index()
{
ViewBag.ClientList = new SelectList(await _context.Clients.ToListAsync(), "ClientID", "Name");
ViewBag.ProductList = await _context.Products
.OrderBy(p => p.ProductSku)
.Select(p => new
{
ProductID = p.ProductID.ToString(),
ProductSku = p.ProductSku,
Name = p.Name,
UnitPrice = p.UnitPrice
})
.ToListAsync();
var expenses = _context.Expenses.Include(e => e.Client);
return View(await expenses.ToListAsync());
}
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Create([Bind("ClientID,Description,UnitAmount,Quantity,TotalAmount")] Expense expense)
{
if (ModelState.IsValid)
{
_context.Add(expense);
await _context.SaveChangesAsync();
TempData["SuccessMessage"] = "Expense created successfully.";
return RedirectToAction(nameof(Index));
}
var errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage);
TempData["ErrorMessage"] = string.Join("; ", errors);
ViewBag.ClientList = new SelectList(await _context.Clients.ToListAsync(), "ClientID", "Name");
ViewBag.ProductList = await _context.Products
.OrderBy(p => p.ProductSku)
.Select(p => new
{
ProductID = p.ProductID.ToString(),
ProductSku = p.ProductSku,
Name = p.Name,
UnitPrice = p.UnitPrice
})
.ToListAsync();
return RedirectToAction(nameof(Index));
}
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Edit(int id, [Bind("ExpenseID,ClientID,Description,UnitAmount,Quantity,TotalAmount")] Expense expense)
{
if (id != expense.ExpenseID)
{
return NotFound();
}
if (ModelState.IsValid)
{
try
{
_context.Update(expense);
await _context.SaveChangesAsync();
TempData["SuccessMessage"] = "Expense updated successfully.";
}
catch (DbUpdateConcurrencyException)
{
if (!ExpenseExists(expense.ExpenseID))
{
return NotFound();
}
throw;
}
return RedirectToAction(nameof(Index));
}
var errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage);
TempData["ErrorMessage"] = string.Join("; ", errors);
ViewBag.ClientList = new SelectList(await _context.Clients.ToListAsync(), "ClientID", "Name");
ViewBag.ProductList = await _context.Products
.OrderBy(p => p.ProductSku)
.Select(p => new
{
ProductID = p.ProductID.ToString(),
ProductSku = p.ProductSku,
Name = p.Name,
UnitPrice = p.UnitPrice
})
.ToListAsync();
return RedirectToAction(nameof(Index));
}
public async Task<IActionResult> Delete(int? id)
{
if (id == null)
{
return NotFound();
}
var expense = await _context.Expenses
.Include(e => e.Client)
.FirstOrDefaultAsync(m => m.ExpenseID == id);
if (expense == null)
{
return NotFound();
}
ViewBag.ClientList = new SelectList(await _context.Clients.ToListAsync(), "ClientID", "Name");
ViewBag.ProductList = await _context.Products
.OrderBy(p => p.ProductSku)
.Select(p => new
{
ProductID = p.ProductID.ToString(),
ProductSku = p.ProductSku,
Name = p.Name,
UnitPrice = p.UnitPrice
})
.ToListAsync();
return View(expense);
}
[HttpPost, ActionName("Delete")]
[ValidateAntiForgeryToken]
public async Task<IActionResult> DeleteConfirmed(int id)
{
var expense = await _context.Expenses.FindAsync(id);
if (expense != null)
{
_context.Expenses.Remove(expense);
await _context.SaveChangesAsync();
TempData["SuccessMessage"] = "Expense deleted successfully.";
}
return RedirectToAction(nameof(Index));
}
private bool ExpenseExists(int id)
{
return _context.Expenses.Any(e => e.ExpenseID == id);
}
}
}

===== END FILE: Controllers\ExpensesController.cs =====

===== BEGIN FILE: Controllers\HomeController.cs =====

using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using System.Diagnostics;
using TaskTracker.Data;
using TaskTracker.Models;
using System.Linq;
using System.Collections.Generic;
using System;
using Microsoft.Extensions.Logging; 
namespace TaskTracker.Controllers
{
public class HomeController : Controller
{
private readonly ILogger<HomeController> _logger;
private readonly AppDbContext _context;
private readonly UserManager<ApplicationUser> _userManager;
public HomeController(AppDbContext context, UserManager<ApplicationUser> userManager, ILogger<HomeController> logger)
{
_logger = logger;
_context = context;
_userManager = userManager;
}
public async Task<IActionResult> Index()
{
if (User.Identity.IsAuthenticated)
{
var userId = _userManager.GetUserId(User);
if (string.IsNullOrEmpty(userId))
{
LoggerExtensions.LogError(_logger, "User ID could not be retrieved for authenticated user.");
return RedirectToAction("Login", "Account");
}
var user = await _userManager.FindByIdAsync(userId);
if (user == null)
{
LoggerExtensions.LogError(_logger, "User not found for ID {UserId}", userId);
return NotFound();
}
if (string.IsNullOrEmpty(user.TimeZoneId))
{
LoggerExtensions.LogInformation(_logger, "No TimeZoneId set for user {UserId}, redirecting to SetTimezone.", userId);
return RedirectToAction(nameof(SetTimezone));
}
try
{
var userTimeZone = TimeZoneInfo.FindSystemTimeZoneById(user.TimeZoneId);
var nowUtc = DateTimeOffset.UtcNow.UtcDateTime;
var offset = userTimeZone.GetUtcOffset(nowUtc);
ViewBag.TimezoneOffset = (int)offset.TotalMinutes;
LoggerExtensions.LogInformation(_logger, "Dynamic TimezoneOffset for Home Index: {TimezoneOffset} minutes, DST Active: {IsDst}, TimeZoneId: {TimeZoneId}", ViewBag.TimezoneOffset, userTimeZone.IsDaylightSavingTime(nowUtc), user.TimeZoneId);
}
catch (TimeZoneNotFoundException ex)
{
LoggerExtensions.LogError(_logger, "Invalid TimeZoneId {TimeZoneId} for user {UserId}: {Error}", user.TimeZoneId, userId, ex.Message);
ViewBag.TimezoneOffset = 0; 
}
var clientList = _context.Clients
.Select(c => new { c.ClientID, c.Name })
.ToList();
clientList.Insert(0, new { ClientID = 0, Name = "Select Client" });
ViewBag.ClientID = new SelectList(clientList, "ClientID", "Name", 0);
var projectList = _context.Projects
.Select(p => new { p.ProjectID, p.Name })
.ToList();
projectList.Insert(0, new { ProjectID = 0, Name = "Select Project" });
ViewBag.ProjectID = new SelectList(projectList, "ProjectID", "Name", 0);
ViewBag.VisibleCreateForm = true;
ViewBag.ReturnTo = "Home";
var runningTimers = _context.TimeEntries
.Where(t => t.UserId == userId && t.EndDateTime == null)
.Include(t => t.Client)
.Include(t => t.Project)
.ToList();
return View(runningTimers);
}
return View();
}
public IActionResult SetTimezone()
{
var timezones = TimeZoneInfo.GetSystemTimeZones()
.Select(tz => new SelectListItem
{
Value = tz.Id,
Text = $"{tz.DisplayName} (UTC{tz.BaseUtcOffset.Hours:+00;-00}:{tz.BaseUtcOffset.Minutes:00})"
})
.OrderBy(tz => tz.Text)
.ToList();
ViewBag.Timezones = new SelectList(timezones, "Value", "Text");
return View(new SetTimezoneViewModel());
}
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> SaveTimezone(SetTimezoneViewModel model)
{
if (!User.Identity.IsAuthenticated)
{
return RedirectToAction("Login", "Account");
}
if (!ModelState.IsValid)
{
var timezones = TimeZoneInfo.GetSystemTimeZones()
.Select(tz => new SelectListItem
{
Value = tz.Id,
Text = $"{tz.DisplayName} (UTC{tz.BaseUtcOffset.Hours:+00;-00}:{tz.BaseUtcOffset.Minutes:00})"
})
.OrderBy(tz => tz.Text)
.ToList();
ViewBag.Timezones = new SelectList(timezones, "Value", "Text", model.TimeZoneId);
return View("SetTimezone", model);
}
var userId = _userManager.GetUserId(User);
var user = await _userManager.FindByIdAsync(userId);
if (user == null)
{
LoggerExtensions.LogError(_logger, "User not found for ID {UserId}", userId);
return NotFound();
}
user.TimeZoneId = model.TimeZoneId;
var result = await _userManager.UpdateAsync(user);
if (result.Succeeded)
{
LoggerExtensions.LogInformation(_logger, "TimeZoneId updated for user {UserId}: {TimeZoneId}", userId, model.TimeZoneId);
TempData["SuccessMessage"] = "Timezone updated successfully.";
}
else
{
var errors = string.Join("; ", result.Errors.Select(e => e.Description));
LoggerExtensions.LogError(_logger, "Failed to update timezone for user {UserId}: {Errors}", userId, errors);
TempData["ErrorMessage"] = "Failed to update timezone: " + errors;
var timezones = TimeZoneInfo.GetSystemTimeZones()
.Select(tz => new SelectListItem
{
Value = tz.Id,
Text = $"{tz.DisplayName} (UTC{tz.BaseUtcOffset.Hours:+00;-00}:{tz.BaseUtcOffset.Minutes:00})"
})
.OrderBy(tz => tz.Text)
.ToList();
ViewBag.Timezones = new SelectList(timezones, "Value", "Text", model.TimeZoneId);
return View("SetTimezone", model);
}
return RedirectToAction(nameof(Index));
}
public IActionResult Privacy()
{
return View();
}
[ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
public IActionResult Error()
{
return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
}
}
}

===== END FILE: Controllers\HomeController.cs =====

===== BEGIN FILE: Controllers\InvoicesController.cs =====

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using TaskTracker.Data;
using TaskTracker.Models;
namespace TaskTracker.Controllers
{
public class InvoicesController : Controller
{
private readonly AppDbContext _context;
public InvoicesController(AppDbContext context)
{
_context = context;
}
public async Task<IActionResult> Index()
{
var appDbContext = _context.Invoices.Include(i => i.Client);
return View(await appDbContext.ToListAsync());
}
public async Task<IActionResult> Details(int? id)
{
if (id == null)
{
return NotFound();
}
var invoice = await _context.Invoices
.Include(i => i.Client)
.FirstOrDefaultAsync(m => m.InvoiceID == id);
if (invoice == null)
{
return NotFound();
}
return View(invoice);
}
public IActionResult Create()
{
ViewData["ClientID"] = new SelectList(_context.Clients, "ClientID", "ClientID");
return View();
}
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Create([Bind("InvoiceID,ClientID,InvoiceDate,DueDate,TotalAmount,Status")] Invoice invoice)
{
if (ModelState.IsValid)
{
_context.Add(invoice);
await _context.SaveChangesAsync();
return RedirectToAction(nameof(Index));
}
ViewData["ClientID"] = new SelectList(_context.Clients, "ClientID", "ClientID", invoice.ClientID);
return View(invoice);
}
public async Task<IActionResult> Edit(int? id)
{
if (id == null)
{
return NotFound();
}
var invoice = await _context.Invoices.FindAsync(id);
if (invoice == null)
{
return NotFound();
}
ViewData["ClientID"] = new SelectList(_context.Clients, "ClientID", "ClientID", invoice.ClientID);
return View(invoice);
}
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Edit(int id, [Bind("InvoiceID,ClientID,InvoiceDate,DueDate,TotalAmount,Status")] Invoice invoice)
{
if (id != invoice.InvoiceID)
{
return NotFound();
}
if (ModelState.IsValid)
{
try
{
_context.Update(invoice);
await _context.SaveChangesAsync();
}
catch (DbUpdateConcurrencyException)
{
if (!InvoiceExists(invoice.InvoiceID))
{
return NotFound();
}
else
{
throw;
}
}
return RedirectToAction(nameof(Index));
}
ViewData["ClientID"] = new SelectList(_context.Clients, "ClientID", "ClientID", invoice.ClientID);
return View(invoice);
}
public async Task<IActionResult> Delete(int? id)
{
if (id == null)
{
return NotFound();
}
var invoice = await _context.Invoices
.Include(i => i.Client)
.FirstOrDefaultAsync(m => m.InvoiceID == id);
if (invoice == null)
{
return NotFound();
}
return View(invoice);
}
[HttpPost, ActionName("Delete")]
[ValidateAntiForgeryToken]
public async Task<IActionResult> DeleteConfirmed(int id)
{
var invoice = await _context.Invoices.FindAsync(id);
if (invoice != null)
{
_context.Invoices.Remove(invoice);
}
await _context.SaveChangesAsync();
return RedirectToAction(nameof(Index));
}
private bool InvoiceExists(int id)
{
return _context.Invoices.Any(e => e.InvoiceID == id);
}
}
}

===== END FILE: Controllers\InvoicesController.cs =====

===== BEGIN FILE: Controllers\ProductsController.cs =====

using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using TaskTracker.Data;
using TaskTracker.Models;
namespace TaskTracker.Controllers
{
public class ProductsController : Controller
{
private readonly AppDbContext _context;
public ProductsController(AppDbContext context)
{
_context = context;
}
public async Task<IActionResult> Index()
{
return View(await _context.Products.ToListAsync());
}
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Create([Bind("Name,Description,UnitPrice,ProductSku")] Product product)
{
if (ModelState.IsValid)
{
_context.Add(product);
await _context.SaveChangesAsync();
TempData["SuccessMessage"] = "Product created successfully.";
return RedirectToAction(nameof(Index));
}
var errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage);
TempData["ErrorMessage"] = string.Join("; ", errors);
return RedirectToAction(nameof(Index));
}
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Edit(int id, [Bind("ProductID,Name,Description,UnitPrice,ProductSku")] Product product)
{
if (id != product.ProductID)
{
return NotFound();
}
if (ModelState.IsValid)
{
try
{
_context.Update(product);
await _context.SaveChangesAsync();
TempData["SuccessMessage"] = "Product updated successfully.";
}
catch (DbUpdateConcurrencyException)
{
if (!ProductExists(product.ProductID))
{
return NotFound();
}
else
throw;
}
return RedirectToAction(nameof(Index));
}
var errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage);
TempData["ErrorMessage"] = string.Join("; ", errors);
return RedirectToAction(nameof(Index));
}
public async Task<IActionResult> Delete(int? id)
{
if (id == null)
{
return NotFound();
}
var product = await _context.Products
.FirstOrDefaultAsync(m => m.ProductID == id);
if (product == null)
{
return NotFound();
}
return View(product);
}
[HttpPost, ActionName("Delete")]
[ValidateAntiForgeryToken]
public async Task<IActionResult> DeleteConfirmed(int id)
{
var product = await _context.Products.FindAsync(id);
if (product != null)
{
_context.Products.Remove(product);
}
await _context.SaveChangesAsync();
return RedirectToAction(nameof(Index));
}
private bool ProductExists(int id)
{
return _context.Products.Any(e => e.ProductID == id);
}
}
}

===== END FILE: Controllers\ProductsController.cs =====

===== BEGIN FILE: Controllers\ProjectsController.cs =====

using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using TaskTracker.Data;
using TaskTracker.Models;
namespace TaskTracker.Controllers
{
public class ProjectsController : Controller
{
private readonly AppDbContext _context;
public ProjectsController(AppDbContext context)
{
_context = context;
}
public async Task<IActionResult> Index()
{
return View(await _context.Projects.ToListAsync());
}
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Create([Bind("Name,Description,Rate")] Project project)
{
if (ModelState.IsValid)
{
_context.Add(project);
await _context.SaveChangesAsync();
TempData["SuccessMessage"] = "Project created successfully.";
return RedirectToAction(nameof(Index));
}
var errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage);
TempData["ErrorMessage"] = string.Join("; ", errors);
return RedirectToAction(nameof(Index));
}
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Edit(int id, [Bind("ProjectID,Name,Description,Rate")] Project project)
{
if (id != project.ProjectID)
{
return NotFound();
}
if (ModelState.IsValid)
{
try
{
_context.Update(project);
await _context.SaveChangesAsync();
TempData["SuccessMessage"] = "Project updated successfully.";
}
catch (DbUpdateConcurrencyException)
{
if (!ProjectExists(project.ProjectID))
{
return NotFound();
}
else
{
throw;
}
}
return RedirectToAction(nameof(Index));
}
var errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage);
TempData["ErrorMessage"] = string.Join("; ", errors);
return RedirectToAction(nameof(Index));
}
public async Task<IActionResult> Delete(int? id)
{
if (id == null)
{
return NotFound();
}
var project = await _context.Projects
.FirstOrDefaultAsync(m => m.ProjectID == id);
if (project == null)
{
return NotFound();
}
return View(project);
}
[HttpPost, ActionName("Delete")]
[ValidateAntiForgeryToken]
public async Task<IActionResult> DeleteConfirmed(int id)
{
var project = await _context.Projects.FindAsync(id);
if (project != null)
{
_context.Projects.Remove(project);
}
await _context.SaveChangesAsync();
return RedirectToAction(nameof(Index));
}
private bool ProjectExists(int id)
{
return _context.Projects.Any(e => e.ProjectID == id);
}
}
}

===== END FILE: Controllers\ProjectsController.cs =====

===== BEGIN FILE: Controllers\SettingsController.cs =====

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using TaskTracker.Data;
using TaskTracker.Models;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
namespace TaskTracker.Controllers
{
[Authorize]
public class SettingsController : Controller
{
private readonly AppDbContext _context;
public SettingsController(AppDbContext context)
{
_context = context;
}
public async Task<IActionResult> Index()
{
var settings = await _context.Settings.FirstOrDefaultAsync();
if (settings == null)
{
settings = new Settings
{
CompanyName = "Default Company"
};
_context.Settings.Add(settings);
await _context.SaveChangesAsync();
}
return View(settings);
}
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Update(Settings settings)
{
if (ModelState.IsValid)
{
var existingSettings = await _context.Settings.FirstOrDefaultAsync();
if (existingSettings == null)
{
_context.Settings.Add(settings);
}
else
{
existingSettings.CompanyName = settings.CompanyName;
existingSettings.AccountsReceivableAddress = settings.AccountsReceivableAddress;
existingSettings.AccountsReceivablePhone = settings.AccountsReceivablePhone;
existingSettings.AccountsReceivableEmail = settings.AccountsReceivableEmail;
existingSettings.PaymentInformation = settings.PaymentInformation;
existingSettings.ThankYouMessage = settings.ThankYouMessage;
_context.Update(existingSettings);
}
await _context.SaveChangesAsync();
TempData["SuccessMessage"] = "Settings updated successfully.";
return RedirectToAction(nameof(Index));
}
return View("Index", settings);
}
}
}

===== END FILE: Controllers\SettingsController.cs =====

===== BEGIN FILE: Controllers\TimeEntriesController.cs =====

using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using TaskTracker.Data;
using TaskTracker.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Logging;
namespace TaskTracker.Controllers
{
public class TimeEntriesController : Controller
{
private readonly AppDbContext _context;
private readonly UserManager<ApplicationUser> _userManager;
private readonly ILogger<TimeEntriesController> _logger;
public TimeEntriesController(AppDbContext context, UserManager<ApplicationUser> userManager, ILogger<TimeEntriesController> logger)
{
_context = context;
_userManager = userManager;
_logger = logger;
}
public async Task<IActionResult> Index(int recordLimit = 10, int page = 1)
{
var userId = _userManager.GetUserId(User);
var user = await _userManager.FindByIdAsync(userId);
if (user == null)
{
LoggerExtensions.LogError(_logger, "User not found for ID {UserId}", userId);
return NotFound();
}
int timezoneOffset;
try
{
var userTimeZone = TimeZoneInfo.FindSystemTimeZoneById(user.TimeZoneId);
var nowUtc = DateTimeOffset.UtcNow.UtcDateTime;
timezoneOffset = (int)userTimeZone.GetUtcOffset(nowUtc).TotalMinutes;
LoggerExtensions.LogInformation(_logger, "Dynamic TimezoneOffset for TimeEntries Index: {TimezoneOffset} minutes, DST Active: {IsDst}, TimeZoneId: {TimeZoneId}", timezoneOffset, userTimeZone.IsDaylightSavingTime(nowUtc), user.TimeZoneId);
}
catch (TimeZoneNotFoundException ex)
{
LoggerExtensions.LogError(_logger, "Invalid TimeZoneId {TimeZoneId} for user {UserId}: {Error}", user.TimeZoneId, userId, ex.Message);
timezoneOffset = 0; 
}
var completedTimeEntriesQuery = _context.TimeEntries
.Where(t => t.UserId == userId && t.EndDateTime != null)
.Include(t => t.Client)
.Include(t => t.Project)
.OrderByDescending(t => t.StartDateTime); 
var totalRecords = await completedTimeEntriesQuery.CountAsync();
var viewModel = new TimeEntriesIndexViewModel
{
TimezoneOffset = timezoneOffset,
ReturnTo = "TimeEntries",
VisibleCreateForm = false,
TotalRecords = totalRecords
};
var validLimits = new[] { 5, 10, 20, 50, 100, 200, -1 }; 
if (!validLimits.Contains(recordLimit))
{
recordLimit = 10; 
}
viewModel.RecordLimit = recordLimit;
var limitOptions = new[]
{
new { Value = 5, Text = "5" },
new { Value = 10, Text = "10" },
new { Value = 20, Text = "20" },
new { Value = 50, Text = "50" },
new { Value = 100, Text = "100" },
new { Value = 200, Text = "200" },
new { Value = -1, Text = "ALL" }
};
viewModel.RecordLimitOptions = new SelectList(limitOptions, "Value", "Text", recordLimit);
var clientList = _context.Clients
.Select(c => new { c.ClientID, c.Name })
.ToList();
clientList.Insert(0, new { ClientID = 0, Name = "Select Client" });
viewModel.ClientList = new SelectList(clientList, "ClientID", "Name", 0);
ViewBag.ClientID = viewModel.ClientList;
var projectList = _context.Projects
.Select(p => new { p.ProjectID, p.Name })
.ToList();
projectList.Insert(0, new { ProjectID = 0, Name = "Select Project" });
viewModel.ProjectList = new SelectList(projectList, "ProjectID", "Name", 0);
ViewBag.ProjectID = viewModel.ProjectList;
viewModel.CurrentPage = page < 1 ? 1 : page;
if (recordLimit == -1) 
{
const int pageSize = 200;
viewModel.TotalPages = (int)Math.Ceiling((double)totalRecords / pageSize);
viewModel.TimeEntries = await completedTimeEntriesQuery
.Skip((viewModel.CurrentPage - 1) * pageSize)
.Take(pageSize)
.ToListAsync();
}
else
{
viewModel.TotalPages = (int)Math.Ceiling((double)totalRecords / recordLimit);
viewModel.TimeEntries = await completedTimeEntriesQuery
.Skip((viewModel.CurrentPage - 1) * recordLimit)
.Take(recordLimit)
.ToListAsync();
}
ViewBag.VisibleCreateForm = false; 
ViewBag.ReturnTo = "TimeEntries"; 
ViewBag.TimezoneOffset = timezoneOffset;
return View(viewModel);
}
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Create([Bind("ClientID,ProjectID,Description,StartDateTime,EndDateTime,HoursSpent")] TimeEntry timeEntry, string action)
{
var userId = _userManager.GetUserId(User);
timeEntry.UserId = userId;
var user = await _userManager.FindByIdAsync(userId);
if (user == null)
{
LoggerExtensions.LogError(_logger, "User not found for ID {UserId}", userId);
return NotFound();
}
int timezoneOffset;
try
{
var userTimeZone = TimeZoneInfo.FindSystemTimeZoneById(user.TimeZoneId);
var nowUtc = DateTimeOffset.UtcNow.UtcDateTime;
timezoneOffset = (int)userTimeZone.GetUtcOffset(nowUtc).TotalMinutes;
LoggerExtensions.LogInformation(_logger, "Dynamic TimezoneOffset for Create: {TimezoneOffset} minutes, TimeZoneId: {TimeZoneId}", timezoneOffset, user.TimeZoneId);
}
catch (TimeZoneNotFoundException ex)
{
LoggerExtensions.LogError(_logger, "Invalid TimeZoneId {TimeZoneId} for user {UserId}: {Error}", user.TimeZoneId, userId, ex.Message);
timezoneOffset = 0; 
}
if (action == "StartTimer")
{
var currentUtc = DateTime.UtcNow; 
var minutes = currentUtc.Minute;
var quarterHours = (int)Math.Floor(minutes / 15.0) * 15;
timeEntry.StartDateTime = new DateTime(currentUtc.Year, currentUtc.Month, currentUtc.Day, currentUtc.Hour, quarterHours, 0, DateTimeKind.Utc);
timeEntry.EndDateTime = null;
timeEntry.HoursSpent = null;
ModelState.Remove("StartDateTime");
ModelState.Remove("EndDateTime");
ModelState.Remove("HoursSpent");
ModelState.Remove("UserId");
ModelState.Remove("Client");
ModelState.Remove("Project");
ModelState.Remove("User");
if (ModelState.IsValid)
{
_context.Add(timeEntry);
await _context.SaveChangesAsync();
LoggerExtensions.LogInformation(_logger, "Timer started for user {UserId}, TimeEntryID: {TimeEntryID}, StartDateTime: {StartDateTime}", userId, timeEntry.TimeEntryID, timeEntry.StartDateTime);
TempData["SuccessMessage"] = "Timer started successfully.";
return RedirectToAction(nameof(Index), "Home");
}
}
else
{
if (ModelState.IsValid)
{
_context.Add(timeEntry);
await _context.SaveChangesAsync();
LoggerExtensions.LogInformation(_logger, "Time entry created for user {UserId}, TimeEntryID: {TimeEntryID}", userId, timeEntry.TimeEntryID);
TempData["SuccessMessage"] = "Time entry created successfully.";
var returnTo = ViewBag.ReturnTo as string ?? "TimeEntries";
return RedirectToAction(nameof(Index), returnTo == "Home" ? "Home" : "TimeEntries");
}
}
var clientList = _context.Clients
.Select(c => new { c.ClientID, c.Name })
.ToList();
clientList.Insert(0, new { ClientID = 0, Name = "Select Client" });
var projectList = _context.Projects
.Select(p => new { p.ProjectID, p.Name })
.ToList();
projectList.Insert(0, new { ProjectID = 0, Name = "Select Project" });
var viewModel = new TimeEntriesIndexViewModel
{
TimeEntries = await _context.TimeEntries
.Where(t => t.UserId == userId && t.EndDateTime != null)
.Include(t => t.Client)
.Include(t => t.Project)
.OrderByDescending(t => t.StartDateTime)
.Take(10) 
.ToListAsync(),
RecordLimit = 10,
RecordLimitOptions = new SelectList(new[]
{
new { Value = 5, Text = "5" },
new { Value = 10, Text = "10" },
new { Value = 20, Text = "20" },
new { Value = 50, Text = "50" },
new { Value = 100, Text = "100" },
new { Value = 200, Text = "200" },
new { Value = -1, Text = "ALL" }
}, "Value", "Text", 10),
ClientList = new SelectList(clientList, "ClientID", "Name", timeEntry.ClientID),
ProjectList = new SelectList(projectList, "ProjectID", "Name", timeEntry.ProjectID),
TimezoneOffset = timezoneOffset,
VisibleCreateForm = true,
ReturnTo = ViewBag.ReturnTo ?? "TimeEntries",
CurrentPage = 1,
TotalPages = 1,
TotalRecords = await _context.TimeEntries.CountAsync(t => t.UserId == userId && t.EndDateTime != null)
};
ViewBag.ClientID = viewModel.ClientList;
ViewBag.ProjectID = viewModel.ProjectList;
ViewBag.VisibleCreateForm = true;
ViewBag.ReturnTo = ViewBag.ReturnTo ?? "TimeEntries";
ViewBag.TimezoneOffset = timezoneOffset;
return View("Index", viewModel);
}
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> StartTimer([Bind("ClientID,ProjectID,Description")] TimeEntry timeEntry)
{
var userId = _userManager.GetUserId(User);
timeEntry.UserId = userId;
var currentUtc = DateTime.UtcNow; 
var minutes = currentUtc.Minute;
var quarterHours = (int)Math.Floor(minutes / 15.0) * 15;
timeEntry.StartDateTime = new DateTime(currentUtc.Year, currentUtc.Month, currentUtc.Day, currentUtc.Hour, quarterHours, 0, DateTimeKind.Utc);
timeEntry.EndDateTime = null;
timeEntry.HoursSpent = null;
ModelState.Remove("StartDateTime");
ModelState.Remove("EndDateTime");
ModelState.Remove("HoursSpent");
if (ModelState.IsValid)
{
_context.Add(timeEntry);
await _context.SaveChangesAsync();
LoggerExtensions.LogInformation(_logger, "Timer started for user {UserId}, TimeEntryID: {TimeEntryID}, StartDateTime: {StartDateTime}", userId, timeEntry.TimeEntryID, timeEntry.StartDateTime);
TempData["SuccessMessage"] = "Timer started successfully.";
return RedirectToAction(nameof(Index));
}
var user = await _userManager.FindByIdAsync(userId);
int timezoneOffset;
try
{
var userTimeZone = TimeZoneInfo.FindSystemTimeZoneById(user.TimeZoneId);
var nowUtc = DateTimeOffset.UtcNow.UtcDateTime;
timezoneOffset = (int)userTimeZone.GetUtcOffset(nowUtc).TotalMinutes;
}
catch (TimeZoneNotFoundException)
{
timezoneOffset = 0;
}
var clientList = _context.Clients
.Select(c => new { c.ClientID, c.Name })
.ToList();
clientList.Insert(0, new { ClientID = 0, Name = "Select Client" });
var projectList = _context.Projects
.Select(p => new { p.ProjectID, p.Name })
.ToList();
projectList.Insert(0, new { ProjectID = 0, Name = "Select Project" });
var viewModel = new TimeEntriesIndexViewModel
{
TimeEntries = await _context.TimeEntries
.Where(t => t.UserId == userId && t.EndDateTime != null)
.Include(t => t.Client)
.Include(t => t.Project)
.OrderByDescending(t => t.StartDateTime)
.Take(10)
.ToListAsync(),
RecordLimit = 10,
RecordLimitOptions = new SelectList(new[]
{
new { Value = 5, Text = "5" },
new { Value = 10, Text = "10" },
new { Value = 20, Text = "20" },
new { Value = 50, Text = "50" },
new { Value = 100, Text = "100" },
new { Value = 200, Text = "200" },
new { Value = -1, Text = "ALL" }
}, "Value", "Text", 10),
ClientList = new SelectList(clientList, "ClientID", "Name", timeEntry.ClientID),
ProjectList = new SelectList(projectList, "ProjectID", "Name", timeEntry.ProjectID),
TimezoneOffset = timezoneOffset,
VisibleCreateForm = true,
ReturnTo = "TimeEntries",
CurrentPage = 1,
TotalPages = 1,
TotalRecords = await _context.TimeEntries.CountAsync(t => t.UserId == userId && t.EndDateTime != null)
};
ViewBag.ClientID = viewModel.ClientList;
ViewBag.ProjectID = viewModel.ProjectList;
ViewBag.VisibleCreateForm = true;
ViewBag.ReturnTo = "TimeEntries";
ViewBag.TimezoneOffset = timezoneOffset;
return View("Index", viewModel);
}
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> StopTimer(int TimeEntryID)
{
var userId = _userManager.GetUserId(User);
var timeEntry = await _context.TimeEntries.FindAsync(TimeEntryID);
if (timeEntry == null || timeEntry.UserId != userId)
{
LoggerExtensions.LogWarning(_logger, "Time entry {TimeEntryID} not found or not owned by user {UserId}", TimeEntryID, userId);
TempData["ErrorMessage"] = "Time entry not found.";
return RedirectToAction(nameof(Index));
}
timeEntry.EndDateTime = DateTime.UtcNow;
var duration = timeEntry.EndDateTime.Value - timeEntry.StartDateTime;
timeEntry.HoursSpent = Convert.ToDecimal(duration.TotalHours);
if (ModelState.IsValid)
{
_context.Update(timeEntry);
await _context.SaveChangesAsync();
LoggerExtensions.LogInformation(_logger, "Timer stopped for user {UserId}, TimeEntryID: {TimeEntryID}, HoursSpent: {HoursSpent}", userId, timeEntry.TimeEntryID, timeEntry.HoursSpent);
TempData["SuccessMessage"] = "Timer stopped successfully.";
}
else
{
TempData["ErrorMessage"] = "Failed to stop timer.";
}
return RedirectToAction(nameof(Index), "Home");
}
public async Task<IActionResult> Edit(int? id)
{
if (id == null)
{
return NotFound();
}
var userId = _userManager.GetUserId(User);
var timeEntry = await _context.TimeEntries
.Include(t => t.Client)
.Include(t => t.Project)
.FirstOrDefaultAsync(t => t.TimeEntryID == id && t.UserId == userId);
if (timeEntry == null)
{
LoggerExtensions.LogWarning(_logger, "Time entry {TimeEntryID} not found for user {UserId}", id, userId);
return NotFound();
}
var user = await _userManager.FindByIdAsync(userId);
try
{
var userTimeZone = TimeZoneInfo.FindSystemTimeZoneById(user.TimeZoneId);
var nowUtc = DateTimeOffset.UtcNow.UtcDateTime;
ViewBag.TimezoneOffset = (int)userTimeZone.GetUtcOffset(nowUtc).TotalMinutes;
}
catch (TimeZoneNotFoundException)
{
ViewBag.TimezoneOffset = 0; 
}
var clientList = _context.Clients
.Select(c => new { c.ClientID, c.Name })
.ToList();
clientList.Insert(0, new { ClientID = 0, Name = "Select Client" });
ViewBag.ClientID = new SelectList(clientList, "ClientID", "Name", timeEntry.ClientID);
var projectList = _context.Projects
.Select(p => new { p.ProjectID, p.Name })
.ToList();
projectList.Insert(0, new { ProjectID = 0, Name = "Select Project" });
ViewBag.ProjectID = new SelectList(projectList, "ProjectID", "Name", timeEntry.ProjectID);
return View(timeEntry);
}
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Edit(int id, [Bind("TimeEntryID,UserId,ClientID,ProjectID,Description,StartDateTime,EndDateTime,HoursSpent")] TimeEntry timeEntry)
{
if (id != timeEntry.TimeEntryID)
{
return NotFound();
}
var userId = _userManager.GetUserId(User);
if (timeEntry.UserId != userId)
{
LoggerExtensions.LogWarning(_logger, "User {UserId} attempted to edit time entry {TimeEntryID} not owned", userId, timeEntry.TimeEntryID);
return Forbid();
}
if (ModelState.IsValid)
{
try
{
_context.Update(timeEntry);
await _context.SaveChangesAsync();
LoggerExtensions.LogInformation(_logger, "Time entry updated for user {UserId}, TimeEntryID: {TimeEntryID}", userId, timeEntry.TimeEntryID);
TempData["SuccessMessage"] = "Time entry updated successfully.";
}
catch (DbUpdateConcurrencyException)
{
if (!TimeEntryExists(timeEntry.TimeEntryID))
{
return NotFound();
}
else
{
throw;
}
}
return RedirectToAction(nameof(Index));
}
var clientList = _context.Clients
.Select(c => new { c.ClientID, c.Name })
.ToList();
clientList.Insert(0, new { ClientID = 0, Name = "Select Client" });
ViewBag.ClientID = new SelectList(clientList, "ClientID", "Name", timeEntry.ClientID);
var projectList = _context.Projects
.Select(p => new { p.ProjectID, p.Name })
.ToList();
projectList.Insert(0, new { ProjectID = 0, Name = "Select Project" });
ViewBag.ProjectID = new SelectList(projectList, "ProjectID", "Name", timeEntry.ProjectID);
var user = await _userManager.FindByIdAsync(userId);
try
{
var userTimeZone = TimeZoneInfo.FindSystemTimeZoneById(user.TimeZoneId);
var nowUtc = DateTimeOffset.UtcNow.UtcDateTime;
ViewBag.TimezoneOffset = (int)userTimeZone.GetUtcOffset(nowUtc).TotalMinutes;
}
catch (TimeZoneNotFoundException)
{
ViewBag.TimezoneOffset = 0; 
}
return View(timeEntry);
}
public async Task<IActionResult> Delete(int? id)
{
if (id == null)
{
return NotFound();
}
var userId = _userManager.GetUserId(User);
var timeEntry = await _context.TimeEntries
.Include(t => t.Client)
.Include(t => t.Project)
.FirstOrDefaultAsync(t => t.TimeEntryID == id && t.UserId == userId);
if (timeEntry == null)
{
LoggerExtensions.LogWarning(_logger, "Time entry {TimeEntryID} not found for user {UserId}", id, userId);
return NotFound();
}
return View(timeEntry);
}
[HttpPost, ActionName("Delete")]
[ValidateAntiForgeryToken]
public async Task<IActionResult> DeleteConfirmed(int id)
{
var userId = _userManager.GetUserId(User);
var timeEntry = await _context.TimeEntries.FindAsync(id);
if (timeEntry == null || timeEntry.UserId != userId)
{
LoggerExtensions.LogWarning(_logger, "Time entry {TimeEntryID} not found or not owned by user {UserId}", id, userId);
TempData["ErrorMessage"] = "Time entry not found.";
return RedirectToAction(nameof(Index));
}
_context.TimeEntries.Remove(timeEntry);
await _context.SaveChangesAsync();
LoggerExtensions.LogInformation(_logger, "Time entry deleted for user {UserId}, TimeEntryID: {TimeEntryID}", userId, id);
TempData["SuccessMessage"] = "Time entry deleted successfully.";
return RedirectToAction(nameof(Index));
}
private bool TimeEntryExists(int id)
{
return _context.TimeEntries.Any(e => e.TimeEntryID == id);
}
}
}

===== END FILE: Controllers\TimeEntriesController.cs =====

