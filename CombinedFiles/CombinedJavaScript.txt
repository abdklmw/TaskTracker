===== BEGIN FILE: wwwroot\js\site.js =====

document.addEventListener('DOMContentLoaded', function () {
$('#create-new-btn').click(function () {
$('#create-form').css('display', 'block');
$('#create-new-btn').css('display', 'none');
});
$('.cancel-create-btn').click(function () {
$('#create-form').css('display', 'none');
$('#create-new-btn').css('display', '');
});
$('.edit-btn').click(function () {
let id = $(this).data('id');
$('#display-row-' + id).css('display', 'none');
$('#edit-row-' + id).css('display', 'block');
});
$('.cancel-btn').click(function () {
let id = $(this).data('id');
$('#edit-row-' + id).css('display', 'none');
$('#display-row-' + id).css('display', 'block');
});
$('.alert-success').delay(3000).fadeOut(1000, function () {
$(this).alert('close');
});
function calculateHoursSpent(startInput, endInput, hoursInput) {
if (startInput.value && endInput.value) {
const start = new Date(startInput.value);
const end = new Date(endInput.value);
if (!isNaN(start) && !isNaN(end) && end > start) {
const diffMs = end - start;
const hours = diffMs / (1000 * 60 * 60); 
hoursInput.value = hours.toFixed(2); 
} else {
hoursInput.value = ''; 
}
} else {
hoursInput.value = ''; 
}
}
const createStartInput = document.querySelector('#create-form input[name="StartDateTime"]');
const createEndInput = document.querySelector('#create-form input[name="EndDateTime"]');
const createHoursInput = document.querySelector('#create-form input[name="HoursSpent"]');
if (createStartInput && createEndInput && createHoursInput) {
createStartInput.addEventListener('input', () => calculateHoursSpent(createStartInput, createEndInput, createHoursInput));
createEndInput.addEventListener('input', () => calculateHoursSpent(createStartInput, createEndInput, createHoursInput));
}
document.querySelectorAll('.edit-mode').forEach(form => {
const startInput = form.querySelector('input[name="StartDateTime"]');
const endInput = form.querySelector('input[name="EndDateTime"]');
const hoursInput = form.querySelector('input[name="HoursSpent"]');
if (startInput && endInput && hoursInput) {
startInput.addEventListener('input', () => calculateHoursSpent(startInput, endInput, hoursInput));
endInput.addEventListener('input', () => calculateHoursSpent(startInput, endInput, hoursInput));
}
});
$('.start-timer-btn').click(function (e) {
e.preventDefault(); 
const form = document.getElementById('create-time-entry-form');
const startInput = document.querySelector('#create-form input[name="StartDateTime"]');
const actionInput = document.getElementById('form-action');
try {
if (startInput) {
startInput.removeAttribute('required'); 
}
if (actionInput) {
actionInput.value = 'StartTimer'; 
}
form.submit(); 
} catch (error) {
console.error('Error submitting Start Timer form:', error);
}
});
function updateHoursSpent() {
const hoursSpentElements = document.querySelectorAll('.hours-spent');
hoursSpentElements.forEach(element => {
const startUtc = new Date(element.dataset.startUtc);
const timeEntryId = element.dataset.timeEntryId;
if (!isNaN(startUtc)) {
const startLocalMs = startUtc.getTime() + (userTimezoneOffset * 60 * 1000);
const nowLocalMs = Date.now();
const diffMs = nowLocalMs - startLocalMs;
const hours = diffMs / (1000 * 60 * 60); 
const roundedHours = Math.ceil(hours * 4) / 4;
element.textContent = roundedHours.toFixed(2);
} else {
console.warn(`Invalid start time for time entry ${timeEntryId}`);
element.textContent = 'N/A';
}
});
}
updateHoursSpent();
setInterval(updateHoursSpent, 60 * 1000); 
function validateTimeEntryCreateForm() {
const form = document.getElementById('create-time-entry-form');
if (form) {
const clientSelect = form.querySelector('select[name="ClientID"]');
const projectSelect = form.querySelector('select[name="ProjectID"]');
const startInput = form.querySelector('input[name="StartDateTime"]');
const endInput = form.querySelector('input[name="EndDateTime"]');
const hoursInput = form.querySelector('input[name="HoursSpent"]');
const descriptionInput = form.querySelector('textarea[name="Description"]');
const createButton = form.querySelector('.create-btn');
const startTimerButton = form.querySelector('.start-timer-btn');
const isCreateValid =
clientSelect.value && clientSelect.value !== '0' &&
projectSelect.value && projectSelect.value !== '0' &&
startInput.value &&
endInput.value &&
hoursInput.value &&
descriptionInput.value.trim();
createButton.disabled = !isCreateValid;
const isStartTimerValid =
clientSelect.value && clientSelect.value !== '0' &&
projectSelect.value && projectSelect.value !== '0' &&
descriptionInput.value.trim();
startTimerButton.disabled = !isStartTimerValid;
}
}
const createTimeEntryForm = document.getElementById('create-time-entry-form');
if (createTimeEntryForm) {
const inputs = createTimeEntryForm.querySelectorAll('select, input, textarea');
inputs.forEach(input => {
input.addEventListener('input', validateTimeEntryCreateForm);
});
validateTimeEntryCreateForm();
}
function calculateTotalAmount(form) {
const unitAmountInput = form.querySelector('.unit-amount-input');
const quantityInput = form.querySelector('.quantity-input');
const totalAmountInput = form.querySelector('.total-amount-input');
if (unitAmountInput && quantityInput && totalAmountInput) {
const unitAmount = parseFloat(unitAmountInput.value) || 0;
const quantity = parseInt(quantityInput.value) || 1;
const totalAmount = unitAmount * quantity;
totalAmountInput.value = totalAmount.toFixed(2);
console.log(`Calculated TotalAmount: ${totalAmount} (UnitAmount: ${unitAmount}, Quantity: ${quantity})`);
} else {
console.warn('Missing inputs for TotalAmount calculation', { unitAmountInput, quantityInput, totalAmountInput });
}
}
window.updateProductFields = function (selectElement) {
const form = selectElement.closest('form');
const descriptionInput = form.querySelector('.description-input');
const unitAmountInput = form.querySelector('.unit-amount-input');
if (!descriptionInput || !unitAmountInput) {
console.warn('Missing form elements', { descriptionInput, unitAmountInput });
return;
}
const selectedOption = selectElement.options[selectElement.selectedIndex];
console.log('Product selected:', {
value: selectElement.value,
sku: selectedOption.dataset.sku,
name: selectedOption.dataset.name,
price: selectedOption.dataset.price
});
if (selectedOption.value && selectedOption.dataset.sku && selectedOption.dataset.name) {
descriptionInput.value = `${selectedOption.dataset.sku} - ${selectedOption.dataset.name}`;
unitAmountInput.value = parseFloat(selectedOption.dataset.price || 0).toFixed(2);
} else {
descriptionInput.value = '';
unitAmountInput.value = '';
}
calculateTotalAmount(form);
validateExpenseCreateForm();
};
function validateExpenseCreateForm() {
const expenseForm = document.querySelector('#create-form form[action="/Expenses/Create"]');
if (expenseForm) {
const clientSelect = expenseForm.querySelector('select[name="ClientID"]');
const descriptionInput = expenseForm.querySelector('.description-input');
const unitAmountInput = expenseForm.querySelector('.unit-amount-input');
const quantityInput = expenseForm.querySelector('.quantity-input');
const totalAmountInput = expenseForm.querySelector('.total-amount-input');
const createButton = expenseForm.querySelector('.create-btn');
const isExpenseValid =
clientSelect.value && clientSelect.value !== '0' &&
descriptionInput.value.trim() &&
unitAmountInput.value && parseFloat(unitAmountInput.value) >= 0 &&
quantityInput.value && parseInt(quantityInput.value) >= 1 &&
totalAmountInput.value && parseFloat(totalAmountInput.value) >= 0;
createButton.disabled = !isExpenseValid;
console.log('Expense form validation:', { isExpenseValid, client: clientSelect.value, description: descriptionInput.value });
} else {
console.warn('Create form not found for validation');
}
}
document.addEventListener('input', function (event) {
const target = event.target;
const form = target.closest('#create-form form[action="/Expenses/Create"]');
if (form && (target.classList.contains('unit-amount-input') || target.classList.contains('quantity-input'))) {
console.log('Input detected on:', target.className, 'Value:', target.value);
calculateTotalAmount(form);
validateExpenseCreateForm();
} else if (form && (target.classList.contains('product-select') ||
target.classList.contains('description-input') ||
target.matches('select[name="ClientID"]'))) {
console.log('Input detected on additional field:', target.className || target.tagName);
validateExpenseCreateForm();
}
});
document.querySelectorAll('.edit-mode form[action="/Expenses/"]').forEach(form => {
const inputs = form.querySelectorAll('.unit-amount-input, .quantity-input');
inputs.forEach(input => {
input.addEventListener('input', () => {
console.log('Edit form input:', input.className, 'Value:', input.value);
calculateTotalAmount(form);
validateExpenseEditForm(form);
});
});
const additionalInputs = form.querySelectorAll('.product-select, .description-input, select[name="ClientID"]');
additionalInputs.forEach(input => {
input.addEventListener('input', () => {
validateExpenseEditForm(form);
});
});
calculateTotalAmount(form);
validateExpenseEditForm(form);
});
function validateExpenseEditForm(form) {
const clientSelect = form.querySelector('select[name="ClientID"]');
const descriptionInput = form.querySelector('.description-input');
const unitAmountInput = form.querySelector('.unit-amount-input');
const quantityInput = form.querySelector('.quantity-input');
const totalAmountInput = form.querySelector('.total-amount-input');
const saveButton = form.querySelector('.save-btn');
const isExpenseValid =
clientSelect.value && clientSelect.value !== '0' &&
descriptionInput.value.trim() &&
unitAmountInput.value && parseFloat(unitAmountInput.value) >= 0 &&
quantityInput.value && parseInt(quantityInput.value) >= 1 &&
totalAmountInput.value && parseFloat(totalAmountInput.value) >= 0;
saveButton.disabled = !isExpenseValid;
console.log('Expense edit form validation:', { isExpenseValid, client: clientSelect.value, description: descriptionInput.value });
}
const expenseCreateForm = document.querySelector('#create-form form[action="/Expenses/Create"]');
if (expenseCreateForm) {
console.log('Create form found, initializing...');
calculateTotalAmount(expenseCreateForm);
validateExpenseCreateForm();
} else {
console.warn('Create form not found on DOMContentLoaded');
}
});

===== END FILE: wwwroot\js\site.js =====

===== BEGIN FILE: wwwroot\js\site.min.js =====

document.addEventListener("DOMContentLoaded",function(){function t(n,t,i){if(n.value&&t.value){const r=new Date(n.value),u=new Date(t.value);if(!isNaN(r)&&!isNaN(u)&&u>r){const n=u-r,t=n/36e5;i.value=t.toFixed(2)}else i.value=""}else i.value=""}function o(){const n=document.querySelectorAll(".hours-spent");n.forEach(n=>{const t=new Date(n.dataset.startUtc),i=n.dataset.timeEntryId;if(isNaN(t))console.warn(`Invalid start time for time entry ${i}`),n.textContent="N/A";else{const i=t.getTime()+userTimezoneOffset*6e4,r=Date.now(),u=r-i,f=u/36e5,e=Math.ceil(f*4)/4;n.textContent=e.toFixed(2)}})}function s(){const n=document.getElementById("create-time-entry-form");if(n){const t=n.querySelector('select[name="ClientID"]'),i=n.querySelector('select[name="ProjectID"]'),u=n.querySelector('input[name="StartDateTime"]'),f=n.querySelector('input[name="EndDateTime"]'),e=n.querySelector('input[name="HoursSpent"]'),r=n.querySelector('textarea[name="Description"]'),o=n.querySelector(".create-btn"),s=n.querySelector(".start-timer-btn"),h=t.value&&t.value!=="0"&&i.value&&i.value!=="0"&&u.value&&f.value&&e.value&&r.value.trim();o.disabled=!h;const c=t.value&&t.value!=="0"&&i.value&&i.value!=="0"&&r.value.trim();s.disabled=!c}}function n(n){const t=n.querySelector(".unit-amount-input"),i=n.querySelector(".quantity-input"),r=n.querySelector(".total-amount-input");if(t&&i&&r){const n=parseFloat(t.value)||0,u=parseInt(i.value)||1,f=n*u;r.value=f.toFixed(2);console.log(`Calculated TotalAmount: ${f} (UnitAmount: ${n}, Quantity: ${u})`)}else console.warn("Missing inputs for TotalAmount calculation",{unitAmountInput:t,quantityInput:i,totalAmountInput:r})}function u(){const n=document.querySelector('#create-form form[action="/Expenses/Create"]');if(n){const t=n.querySelector('select[name="ClientID"]'),i=n.querySelector(".description-input"),r=n.querySelector(".unit-amount-input"),u=n.querySelector(".quantity-input"),f=n.querySelector(".total-amount-input"),o=n.querySelector(".create-btn"),e=t.value&&t.value!=="0"&&i.value.trim()&&r.value&&parseFloat(r.value)>=0&&u.value&&parseInt(u.value)>=1&&f.value&&parseFloat(f.value)>=0;o.disabled=!e;console.log("Expense form validation:",{isExpenseValid:e,client:t.value,description:i.value})}else console.warn("Create form not found for validation")}function e(n){const t=n.querySelector('select[name="ClientID"]'),i=n.querySelector(".description-input"),r=n.querySelector(".unit-amount-input"),u=n.querySelector(".quantity-input"),f=n.querySelector(".total-amount-input"),o=n.querySelector(".save-btn"),e=t.value&&t.value!=="0"&&i.value.trim()&&r.value&&parseFloat(r.value)>=0&&u.value&&parseInt(u.value)>=1&&f.value&&parseFloat(f.value)>=0;o.disabled=!e;console.log("Expense edit form validation:",{isExpenseValid:e,client:t.value,description:i.value})}$("#create-new-btn").click(function(){$("#create-form").css("display","block");$("#create-new-btn").css("display","none")});$(".cancel-create-btn").click(function(){$("#create-form").css("display","none");$("#create-new-btn").css("display","")});$(".edit-btn").click(function(){let n=$(this).data("id");$("#display-row-"+n).css("display","none");$("#edit-row-"+n).css("display","block")});$(".cancel-btn").click(function(){let n=$(this).data("id");$("#edit-row-"+n).css("display","none");$("#display-row-"+n).css("display","block")});$(".alert-success").delay(3e3).fadeOut(1e3,function(){$(this).alert("close")});const i=document.querySelector('#create-form input[name="StartDateTime"]'),r=document.querySelector('#create-form input[name="EndDateTime"]'),f=document.querySelector('#create-form input[name="HoursSpent"]');i&&r&&f&&(i.addEventListener("input",()=>t(i,r,f)),r.addEventListener("input",()=>t(i,r,f)));document.querySelectorAll(".edit-mode").forEach(n=>{const i=n.querySelector('input[name="StartDateTime"]'),r=n.querySelector('input[name="EndDateTime"]'),u=n.querySelector('input[name="HoursSpent"]');i&&r&&u&&(i.addEventListener("input",()=>t(i,r,u)),r.addEventListener("input",()=>t(i,r,u)))});$(".start-timer-btn").click(function(n){n.preventDefault();const r=document.getElementById("create-time-entry-form"),t=document.querySelector('#create-form input[name="StartDateTime"]'),i=document.getElementById("form-action");try{t&&t.removeAttribute("required");i&&(i.value="StartTimer");r.submit()}catch(u){console.error("Error submitting Start Timer form:",u)}});o();setInterval(o,6e4);const h=document.getElementById("create-time-entry-form");if(h){const n=h.querySelectorAll("select, input, textarea");n.forEach(n=>{n.addEventListener("input",s)});s()}window.updateProductFields=function(t){const e=t.closest("form"),r=e.querySelector(".description-input"),f=e.querySelector(".unit-amount-input");if(!r||!f){console.warn("Missing form elements",{descriptionInput:r,unitAmountInput:f});return}const i=t.options[t.selectedIndex];console.log("Product selected:",{value:t.value,sku:i.dataset.sku,name:i.dataset.name,price:i.dataset.price});i.value&&i.dataset.sku&&i.dataset.name?(r.value=`${i.dataset.sku} - ${i.dataset.name}`,f.value=parseFloat(i.dataset.price||0).toFixed(2)):(r.value="",f.value="");n(e);u()};document.addEventListener("input",function(t){const i=t.target,r=i.closest('#create-form form[action="/Expenses/Create"]');r&&(i.classList.contains("unit-amount-input")||i.classList.contains("quantity-input"))?(console.log("Input detected on:",i.className,"Value:",i.value),n(r),u()):r&&(i.classList.contains("product-select")||i.classList.contains("description-input")||i.matches('select[name="ClientID"]'))&&(console.log("Input detected on additional field:",i.className||i.tagName),u())});document.querySelectorAll('.edit-mode form[action="/Expenses/"]').forEach(t=>{const i=t.querySelectorAll(".unit-amount-input, .quantity-input");i.forEach(i=>{i.addEventListener("input",()=>{console.log("Edit form input:",i.className,"Value:",i.value),n(t),e(t)})});const r=t.querySelectorAll('.product-select, .description-input, select[name="ClientID"]');r.forEach(n=>{n.addEventListener("input",()=>{e(t)})});n(t);e(t)});const c=document.querySelector('#create-form form[action="/Expenses/Create"]');c?(console.log("Create form found, initializing..."),n(c),u()):console.warn("Create form not found on DOMContentLoaded")});

===== END FILE: wwwroot\js\site.min.js =====

